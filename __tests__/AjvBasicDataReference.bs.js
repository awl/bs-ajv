// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Ajv = require("ajv");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var AjvOptions = require("../src/AjvOptions.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

describe("$data reference", (function () {
        var options = AjvOptions.make(/* () */0);
        options.$data = true;
        Jest.test("smaller/larger example", (function () {
                var schema = Json_encode.object_(/* :: */[
                      /* tuple */[
                        "properties",
                        Json_encode.object_(/* :: */[
                              /* tuple */[
                                "smaller",
                                Json_encode.object_(/* :: */[
                                      /* tuple */[
                                        "type",
                                        "number"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "maximum",
                                          Json_encode.object_(/* :: */[
                                                /* tuple */[
                                                  "$data",
                                                  "1/larger"
                                                ],
                                                /* [] */0
                                              ])
                                        ],
                                        /* [] */0
                                      ]
                                    ])
                              ],
                              /* :: */[
                                /* tuple */[
                                  "larger",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "type",
                                          "number"
                                        ],
                                        /* [] */0
                                      ])
                                ],
                                /* [] */0
                              ]
                            ])
                      ],
                      /* [] */0
                    ]);
                var validData = Json_encode.object_(/* :: */[
                      /* tuple */[
                        "smaller",
                        5
                      ],
                      /* :: */[
                        /* tuple */[
                          "larger",
                          7
                        ],
                        /* [] */0
                      ]
                    ]);
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](new Ajv(options).validate(schema, validData)));
              }));
        return Jest.test("example with self reference", (function () {
                      var schema = Json_encode.object_(/* :: */[
                            /* tuple */[
                              "additionalProperties",
                              Json_encode.object_(/* :: */[
                                    /* tuple */[
                                      "type",
                                      "string"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "format",
                                        Json_encode.object_(/* :: */[
                                              /* tuple */[
                                                "$data",
                                                "0#"
                                              ],
                                              /* [] */0
                                            ])
                                      ],
                                      /* [] */0
                                    ]
                                  ])
                            ],
                            /* [] */0
                          ]);
                      var validData = Json_encode.object_(/* :: */[
                            /* tuple */[
                              "date-time",
                              "1963-06-19T08:30:06.283185Z"
                            ],
                            /* :: */[
                              /* tuple */[
                                "email",
                                "joe.bloggs@example.com"
                              ],
                              /* [] */0
                            ]
                          ]);
                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](new Ajv(options).validate(schema, validData)));
                    }));
      }));

/*  Not a pure module */
