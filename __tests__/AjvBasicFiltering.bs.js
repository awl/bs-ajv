// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Ajv = require("../src/Ajv.bs.js");
var Ajv$1 = require("ajv");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var AjvOptions = require("../src/AjvOptions.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

describe("data filtering (removeAdditional option)", (function () {
        var options = AjvOptions.make(/* () */0);
        options.removeAdditional = true;
        return Jest.test("basic remove additional test", (function () {
                      var schema = Json_encode.object_(/* :: */[
                            /* tuple */[
                              "additionalProperties",
                              Json_encode.bool(/* false */0)
                            ],
                            /* :: */[
                              /* tuple */[
                                "properties",
                                Json_encode.object_(/* :: */[
                                      /* tuple */[
                                        "foo",
                                        Json_encode.object_(/* :: */[
                                              /* tuple */[
                                                "type",
                                                "number"
                                              ],
                                              /* [] */0
                                            ])
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "bar",
                                          Json_encode.object_(/* :: */[
                                                /* tuple */[
                                                  "baz",
                                                  Json_encode.object_(/* :: */[
                                                        /* tuple */[
                                                          "type",
                                                          "string"
                                                        ],
                                                        /* [] */0
                                                      ])
                                                ],
                                                /* [] */0
                                              ])
                                        ],
                                        /* [] */0
                                      ]
                                    ])
                              ],
                              /* [] */0
                            ]
                          ]);
                      var validData = Json_encode.object_(/* :: */[
                            /* tuple */[
                              "foo",
                              0
                            ],
                            /* :: */[
                              /* tuple */[
                                "additional1",
                                1
                              ],
                              /* :: */[
                                /* tuple */[
                                  "bar",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "baz",
                                          "abc"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "additional2",
                                            2
                                          ],
                                          /* [] */0
                                        ]
                                      ])
                                ],
                                /* [] */0
                              ]
                            ]
                          ]);
                      var validate = Ajv.compile(schema, new Ajv$1(options));
                      var handler = function (param) {
                        if (typeof param === "number") {
                          return true;
                        } else {
                          return false;
                        }
                      };
                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](handler(Curry._1(validate, validData))));
                    }));
      }));

/*  Not a pure module */
